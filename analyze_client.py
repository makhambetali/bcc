import pandas as pd
import os

# --- –ö–û–ù–§–ò–ì–£–†–ê–Ø ---
DATA_DIRECTORY = 'case1'
CLIENT_PROFILES_PATH = os.path.join(DATA_DIRECTORY, 'clients.csv')

# --- –§–£–ù–ö–¶–ò–ò –°–ö–û–†–ò–ù–ì–ê (–û–ë–ù–û–í–õ–ï–ù–ù–´–ï) ---

def score_travel_card(features: dict) -> float:
    travel_spend = (
        features['spend_by_category'].get('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', 0) +
        features['spend_by_category'].get('–¢–∞–∫—Å–∏', 0) +
        features['spend_by_category'].get('–û—Ç–µ–ª–∏', 0)
    )
    score = travel_spend * 0.04
    if features.get('fx_spend_sum', 0) > 0:
        score *= 1.2
    return score

def score_premium_card(features: dict) -> float:
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ö–µ—à–±—ç–∫ —Ç–µ–ø–µ—Ä—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ (tier_cashback)
    avg_balance = features.get('avg_monthly_balance_KZT', 0)
    if avg_balance < 500000:
        tier_cashback_rate = 0.02
    elif avg_balance < 2000000:
        tier_cashback_rate = 0.03
    else:
        tier_cashback_rate = 0.04
        
    ATM_FEE = 500
    saved_fees = features.get('atm_withdrawal_count', 0) * ATM_FEE
    
    premium_spend = (
        features['spend_by_category'].get('–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è', 0) +
        features['spend_by_category'].get('–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è', 0) +
        features['spend_by_category'].get('–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', 0)
    )
    premium_cashback = premium_spend * 0.04
    
    total_spend = features['spend_by_category'].sum()
    base_spend = total_spend - premium_spend
    base_cashback = base_spend * tier_cashback_rate
    
    return saved_fees + premium_cashback + base_cashback

def score_credit_card(features: dict) -> float:
    top_3_spend = features.get('top_3_spend', 0)
    online_spend = (
        features['spend_by_category'].get('–ï–¥–∏–º –¥–æ–º–∞', 0) +
        features['spend_by_category'].get('–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞', 0) +
        features['spend_by_category'].get('–ò–≥—Ä–∞–µ–º –¥–æ–º–∞', 0)
    )
    score = (top_3_spend + online_spend) * 0.10
    return score

def score_fx_exchange(features: dict) -> float:
    fx_volume = features.get('fx_buy_sum', 0) + features.get('fx_sell_sum', 0)
    return fx_volume * 0.005

def score_cash_loan(features: dict) -> float:
    if features.get('total_out', 0) > features.get('total_in', 0) * 1.2 and \
       features.get('loan_payment_count', 0) > 0:
        return 50000
    return 0
    
def score_savings_deposit(features: dict) -> float:
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ü–µ–Ω–∫–∞ —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
    # –°–∏–≥–Ω–∞–ª: —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∫—Ä—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ [cite: 43]
    avg_balance = features.get('avg_monthly_balance_KZT', 0)
    # –£—Å–ª–æ–≤–∏–µ: –æ—Å—Ç–∞—Ç–æ–∫ > 1 –º–ª–Ω –∏ –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç > 50% –æ—Ç –≤—Å–µ—Ö –¥–æ—Ö–æ–¥–æ–≤ (–ø—Ä–∏–∑–Ω–∞–∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
    if avg_balance > 1000000 and avg_balance > features.get('total_in', 0) * 0.5:
        # –í—ã–≥–æ–¥–∞ - –ø—Ä–∏–º–µ—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–æ –≤–∫–ª–∞–¥—É –∑–∞ 3 –º–µ—Å—è—Ü–∞ (—Å—Ç–∞–≤–∫–∞ 14% –≥–æ–¥–æ–≤—ã—Ö)
        return avg_balance * (0.14 / 4)
    return 0

def score_cumulative_deposit(features: dict) -> float:
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ü–µ–Ω–∫–∞ —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
    # –°–∏–≥–Ω–∞–ª: —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ [cite: 46]
    avg_balance = features.get('avg_monthly_balance_KZT', 0)
    # –£—Å–ª–æ–≤–∏–µ: –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç 100 —Ç—ã—Å –¥–æ 1 –º–ª–Ω (–Ω–µ–±–æ–ª—å—à–æ–π, –Ω–æ –∏ –Ω–µ –Ω—É–ª–µ–≤–æ–π)
    if 100000 < avg_balance <= 1000000:
        # –í—ã–≥–æ–¥–∞ - –ø—Ä–∏–º–µ—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–æ –≤–∫–ª–∞–¥—É –∑–∞ 3 –º–µ—Å—è—Ü–∞ (—Å—Ç–∞–≤–∫–∞ 12% –≥–æ–¥–æ–≤—ã—Ö)
        return avg_balance * (0.12 / 4)
    return 0
    
def score_multicurrency_deposit(features: dict) -> float:
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ü–µ–Ω–∫–∞ —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –∏ FX
    # –°–∏–≥–Ω–∞–ª: —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ + FX-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å [cite: 40]
    avg_balance = features.get('avg_monthly_balance_KZT', 0)
    has_fx_activity = features.get('fx_buy_sum', 0) > 0 or features.get('fx_spend_sum', 0) > 0
    if avg_balance > 200000 and has_fx_activity:
        return avg_balance * (0.10 / 4) # –°—Ç–∞–≤–∫–∞ –Ω–∏–∂–µ, —Ç.–∫. –≤–∫–ª–∞–¥ –≥–∏–±–∫–∏–π
    return 0
    
def score_investments(features: dict) -> float:
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞
    avg_balance = features.get('avg_monthly_balance_KZT', 0)
    if avg_balance > 500000:
        # –£—Å–ª–æ–≤–Ω—ã–π –±–∞–ª–ª, —Ç.–∫. –ø—Ä—è–º—É—é –≤—ã–≥–æ–¥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å–ª–æ–∂–Ω–æ
        return avg_balance * 0.05
    return 0

def score_gold_bars(features: dict) -> float:
    return features['spend_by_category'].get('–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è', 0) * 0.1

# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê ---

def analyze_single_client(client_id: int, profiles_df: pd.DataFrame):
    print(f"--- –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ID: {client_id} ---")
    
    try:
        transactions_df = pd.read_csv(os.path.join(DATA_DIRECTORY, f'client_{client_id}_transactions_3m.csv'))
        transfers_df = pd.read_csv(os.path.join(DATA_DIRECTORY, f'client_{client_id}_transfers_3m.csv'))
        client_profile = profiles_df.loc[client_id]
    except (FileNotFoundError, KeyError):
        print(f"–û–®–ò–ë–ö–ê: –§–∞–π–ª—ã –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    features = {}
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏—á–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    features['avg_monthly_balance_KZT'] = client_profile['avg_monthly_balance_KZT']
    features['status'] = client_profile['status']
    
    # –§–∏—á–∏ –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    features['spend_by_category'] = transactions_df.groupby('category')['amount'].sum()
    features['fx_spend_sum'] = transactions_df[transactions_df['currency'].isin(['USD', 'EUR'])]['amount'].sum()
    top_3 = features['spend_by_category'].nlargest(3)
    features['top_3_categories'] = top_3.index.tolist()
    features['top_3_spend'] = top_3.sum()
    
    # –§–∏—á–∏ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    transfers_agg = transfers_df.groupby('type')['amount'].agg(['sum', 'size'])
    features['atm_withdrawal_count'] = transfers_agg.loc['atm_withdrawal']['size'] if 'atm_withdrawal' in transfers_agg.index else 0
    features['fx_buy_sum'] = transfers_agg.loc['fx_buy']['sum'] if 'fx_buy' in transfers_agg.index else 0
    features['loan_payment_count'] = transfers_agg.loc['loan_payment_out']['size'] if 'loan_payment_out' in transfers_agg.index else 0
    features['total_in'] = transfers_df[transfers_df['direction'] == 'in']['amount'].sum()
    features['total_out'] = transfers_df[transfers_df['direction'] == 'out']['amount'].sum()

    scores = {
        "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π": score_travel_card(features),
        "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞": score_premium_card(features),
        "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞": score_credit_card(features),
        "–û–±–º–µ–Ω –≤–∞–ª—é—Ç": score_fx_exchange(features),
        "–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏": score_cash_loan(features),
        "–î–µ–ø–æ–∑–∏—Ç –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π": score_multicurrency_deposit(features),
        "–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π": score_savings_deposit(features),
        "–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π": score_cumulative_deposit(features),
        "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": score_investments(features),
        "–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏": score_gold_bars(features)
    }
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
    if features['status'] == '–°—Ç—É–¥–µ–Ω—Ç':
        scores['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'] *= 0.2
        scores['–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏'] *= 0.1
    elif features['status'] == '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç':
        scores['–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞'] *= 1.5
        scores['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'] *= 1.2

    print("\n–û—Ü–µ–Ω–∫–∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –ª—É—á—à–µ):")
    sorted_scores = sorted(scores.items(), key=lambda item: item[1], reverse=True)
    for product, score in sorted_scores:
        print(f"  - {product}: {score:,.2f}")
    
    best_product = sorted_scores[0][0]
    print(f"\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: **{best_product}**\n")

# --- –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê ---
if __name__ == "__main__":
    try:
        all_profiles = pd.read_csv(CLIENT_PROFILES_PATH).set_index('client_code')
    except FileNotFoundError:
        print(f"–û–®–ò–ë–ö–ê: –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–æ—Ñ–∏–ª–µ–π {CLIENT_PROFILES_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        exit()

    # üëá –£–ö–ê–ñ–ò–¢–ï ID –ö–õ–ò–ï–ù–¢–ê, –ö–û–¢–û–†–û–ì–û –ù–£–ñ–ù–û –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨
    CLIENT_ID_TO_ANALYZE = 3
    
    analyze_single_client(CLIENT_ID_TO_ANALYZE, all_profiles)