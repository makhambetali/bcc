import pandas as pd
import os
from typing import Dict, Any

# --- –ß–ê–°–¢–¨ 1: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
DATA_DIRECTORY = 'case1'
CLIENT_PROFILES_PATH = os.path.join(DATA_DIRECTORY, 'clients.csv')


# --- –ß–ê–°–¢–¨ 2: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ê–°–ß–Å–¢ –ü–û–†–û–ì–û–í ---
def calculate_global_thresholds(profiles_df: pd.DataFrame) -> dict:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤—Å–µ–π –±–∞–∑–µ –∫–ª–∏–µ–Ω—Ç–æ–≤.
    """
    thresholds = {}
    balance_data = profiles_df['avg_monthly_balance_KZT']
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –¢–ó –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤ –±–∞–ª–∞–Ω—Å–∞, –∞ –Ω–µ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏
    thresholds['balance_mid'] = 1000000
    thresholds['balance_high'] = 6000000
    
    atm_counts = []
    for client_id in profiles_df.index:
        try:
            transfers_path = os.path.join(DATA_DIRECTORY, f'client_{client_id}_transfers_3m.csv')
            transfers_df = pd.read_csv(transfers_path)
            count = transfers_df[transfers_df['type'] == 'atm_withdrawal'].shape[0]
            atm_counts.append(count)
        except FileNotFoundError:
            atm_counts.append(0)
            
    thresholds['atm_frequency'] = pd.Series(atm_counts).quantile(0.75)
    
    print("--- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –±–æ–Ω—É—Å–æ–≤) ---")
    print(f"  - –ü–æ—Ä–æ–≥ —á–∞—Å—Ç—ã—Ö —Å–Ω—è—Ç–∏–π: {thresholds['atm_frequency']:.0f} —Ä–∞–∑ (75-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å)")
    print("-----------------------------------------------------------------")
    
    return thresholds


# --- –ß–ê–°–¢–¨ 3: –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ---
def load_client_data(client_id: int, profiles_df: pd.DataFrame) -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ—Ñ–∏–ª—å, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –ø–µ—Ä–µ–≤–æ–¥—ã) –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ ID.
    """
    print(f"\n–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ID: {client_id}...")
    try:
        client_profile = profiles_df.loc[client_id]
        transactions_path = os.path.join(DATA_DIRECTORY, f'client_{client_id}_transactions_3m.csv')
        transfers_path = os.path.join(DATA_DIRECTORY, f'client_{client_id}_transfers_3m.csv')
        transactions_df = pd.read_csv(transactions_path)
        transfers_df = pd.read_csv(transfers_path)
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return {"profile": client_profile, "transactions": transactions_df, "transfers": transfers_df}
    except (FileNotFoundError, KeyError) as e:
        print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}. {e}")
        return {}


# --- –ß–ê–°–¢–¨ 4: –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–î–ì–û–¢–û–í–ö–ò –ü–†–ò–ó–ù–ê–ö–û–í ---
def engineer_features(client_data: dict) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    """
    features = {}
    profile = client_data.get("profile", pd.Series())
    transactions_df = client_data.get('transactions', pd.DataFrame())
    transfers_df = client_data.get('transfers', pd.DataFrame())

    # –ü–µ—Ä–µ–¥–∞–µ–º —Å—ã—Ä–æ–π DataFrame –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ —Å–∫–æ—Ä–∏–Ω–≥–µ
    features['raw_transfers'] = transfers_df

    features['avg_monthly_balance_KZT'] = profile.get('avg_monthly_balance_KZT', 0)

    if not transactions_df.empty:
        features['spend_by_category'] = transactions_df.groupby('category')['amount'].sum()
        top_3 = features['spend_by_category'].nlargest(3)
        features['top_3_categories'] = top_3.index.tolist()
    else:
        features['spend_by_category'] = pd.Series()
        features['top_3_categories'] = []

    if not transfers_df.empty:
        transfers_agg = transfers_df.groupby('type').size()
        features['atm_withdrawal_count'] = transfers_agg.get('atm_withdrawal', 0)
        features['p2p_out_count'] = transfers_agg.get('p2p_out', 0)
        repayment_types = {'installment_payment_out', 'cc_repayment_out'}
        features['has_repayment_history'] = any(t in transfers_agg.index for t in repayment_types)
    else:
        features['atm_withdrawal_count'] = 0
        features['p2p_out_count'] = 0
        features['has_repayment_history'] = False

    return features


# --- –ß–ê–°–¢–¨ 5: –§–£–ù–ö–¶–ò–ò –û–¶–ï–ù–ö–ò –ü–†–û–î–£–ö–¢–û–í (–û–ë–ù–û–í–õ–ï–ù–ù–´–ï) ---

def score_travel_card(features: dict) -> float:
    """–õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º."""
    CASHBACK_RATE = 0.04
    CASHBACK_LIMIT_3M = 90000
    PERKS_BONUS = 5000 # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ (–æ—Ç–µ–ª–∏, –∞—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ)

    travel_spend = (
        features['spend_by_category'].get('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', 0) +
        features['spend_by_category'].get('–¢–∞–∫—Å–∏', 0)
    )
    cashback_benefit = travel_spend * CASHBACK_RATE

    perks_benefit = 0
    if features['spend_by_category'].get('–û—Ç–µ–ª–∏', 0) > 0:
        perks_benefit = PERKS_BONUS
        
    return min(cashback_benefit, CASHBACK_LIMIT_3M) + perks_benefit

def score_premium_card(features: dict, thresholds: dict) -> float:
    """–õ–æ–≥–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º."""
    ATM_FEE = 500
    CASHBACK_LIMIT_3M = 100000 * 3
    FREE_ATM_WITHDRAWAL_SUM_LIMIT_3M = 3000000 * 3

    transfers_df = features.get('raw_transfers', pd.DataFrame())
    atm_withdrawals = transfers_df[transfers_df['type'] == 'atm_withdrawal'].copy()
    saved_fees_atm = 0
    if not atm_withdrawals.empty:
        atm_withdrawals['cumulative_sum'] = atm_withdrawals['amount'].cumsum()
        free_withdrawals_df = atm_withdrawals[atm_withdrawals['cumulative_sum'] <= FREE_ATM_WITHDRAWAL_SUM_LIMIT_3M]
        saved_fees_atm = len(free_withdrawals_df) * ATM_FEE
        
    saved_fees_transfers = features.get('p2p_out_count', 0) * 150 # –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–∞—Ä—Ç—ã –†–ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã, —É–±–∏—Ä–∞–µ–º –≤—ã–≥–æ–¥—É
    total_saved_fees = saved_fees_atm # + saved_fees_transfers

    avg_balance = features.get('avg_monthly_balance_KZT', 0)
    if avg_balance < 1000000: tier_cashback_rate = 0.02
    elif avg_balance < 6000000: tier_cashback_rate = 0.03
    else: tier_cashback_rate = 0.04
        
    premium_spend = features['spend_by_category'].get('–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è', 0) + features['spend_by_category'].get('–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è', 0) + features['spend_by_category'].get('–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', 0)
    premium_cashback = premium_spend * 0.04
    base_cashback = (features['spend_by_category'].sum() - premium_spend) * tier_cashback_rate
    capped_total_cashback = min(premium_cashback + base_cashback, CASHBACK_LIMIT_3M)

    return (total_saved_fees + capped_total_cashback)

def score_credit_card(features: dict) -> float:
    """–ö–µ—à–±—ç–∫ –¥–æ 10% –≤ 3 ¬´–ª—é–±–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö¬ª + 10% –Ω–∞ –æ–Ω–ª–∞–π–Ω-—É—Å–ª—É–≥–∏."""
    REPAYMENT_BONUS = 7500
    CASHBACK_RATE = 0.10
    
    top_categories = set(features.get('top_3_categories', []))
    online_categories = {'–ï–¥–∏–º –¥–æ–º–∞', '–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞', '–ò–≥—Ä–∞–µ–º –¥–æ–º–∞'}
    all_cashback_categories = top_categories.union(online_categories)
    
    total_cashback_spend = sum(features['spend_by_category'].get(cat, 0) for cat in all_cashback_categories)
    cashback_benefit = total_cashback_spend * CASHBACK_RATE
    
    repayment_bonus = REPAYMENT_BONUS if features.get('has_repayment_history', False) else 0
        
    return cashback_benefit + repayment_bonus

# --- –§—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ---
def score_fx_exchange(features: dict) -> float: return 0
def score_cash_loan(features: dict) -> float: return 0
def score_multicurrency_deposit(features: dict) -> float: return 0
def score_savings_deposit(features: dict) -> float: return 0
def score_cumulative_deposit(features: dict) -> float: return 0
def score_investments(features: dict) -> float: return 0
def score_gold_bars(features: dict) -> float: return 0


# --- –ß–ê–°–¢–¨ 6: –ì–õ–ê–í–ù–´–ô –ë–õ–û–ö –ó–ê–ü–£–°–ö–ê ---
if __name__ == "__main__":
    try:
        all_profiles = pd.read_csv(CLIENT_PROFILES_PATH).set_index('client_code')
    except FileNotFoundError:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –§–∞–π–ª –ø—Ä–æ—Ñ–∏–ª–µ–π {CLIENT_PROFILES_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        exit()

    global_thresholds = calculate_global_thresholds(all_profiles)
    
    # üëá –£–ö–ê–ñ–ò–¢–ï ID –ö–õ–ò–ï–ù–¢–ê, –ö–û–¢–û–†–û–ì–û –ù–£–ñ–ù–û –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨
    CLIENT_TO_ANALYZE = 21
    
    client_raw_data = load_client_data(CLIENT_TO_ANALYZE, all_profiles)

    if client_raw_data:
        client_features = engineer_features(client_raw_data)
        
        scores = {
            "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π": score_travel_card(client_features),
            "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞": score_premium_card(client_features, global_thresholds),
            "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞": score_credit_card(client_features),
            "–û–±–º–µ–Ω –≤–∞–ª—é—Ç": score_fx_exchange(client_features),
            "–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏": score_cash_loan(client_features),
            "–î–µ–ø–æ–∑–∏—Ç –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π": score_multicurrency_deposit(client_features),
            "–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π": score_savings_deposit(client_features),
            "–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π": score_cumulative_deposit(client_features),
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": score_investments(client_features),
            "–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏": score_gold_bars(client_features),
        }

        best_product = max(scores, key=scores.get)

        print("\n" + "="*40)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê (–ø–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º):")
        print(f"  - –ö–ª–∏–µ–Ω—Ç ID: {CLIENT_TO_ANALYZE}")
        print("\n–û—Ü–µ–Ω–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:")
        for product, score in sorted(scores.items(), key=lambda item: item[1], reverse=True):
            print(f"  - {product}: {score:,.2f}")
        
        print(f"\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: **{best_product}**")
        print("="*40)